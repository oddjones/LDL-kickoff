@inherits WebViewPage<Umbraco.Forms.Mvc.Models.FormViewModel>
@using Umbraco.Forms.Core
@using Umbraco.Forms.Mvc.Models
@using Umbraco.Forms.Mvc.BusinessLogic
@using Umbraco.Forms.MVC.Extensions
@using Umbraco.Forms.Core.Extensions

<script type="text/javascript">
    var contourDateFormat = "@Html.ConvertDateFormat()";
</script>
<script src="@Url.Content("~/umbraco/plugins/umbracocontour/scripts/frontend/contourform.js")" type="text/javascript"></script>
<script src="@Url.Content("~/umbraco/plugins/umbracocontour/scripts/LDL.Repeater.js")" type="text/javascript"></script>
<script src="@Url.Content("~/umbraco/plugins/umbracocontour/scripts/frontend/LDL.Contour.js")" type="text/javascript"></script>
<script type="text/javascript">
    var contourFieldValues@{@Model.FormClientId};

    (function ($) {
        $(function () {

            $("#contour_form_@{@Model.FormName.Replace(" ","")} .contourPage input").change(function() {
                PopulateFieldValues@{@Model.FormClientId}();
                CheckRules@{@Model.FormClientId}();
            });

            $("#contour_form_@{@Model.FormName.Replace(" ","")} .contourPage select").change(function () {
                PopulateFieldValues@{@Model.FormClientId}();
                CheckRules@{@Model.FormClientId}();
            });

            PopulateFieldValues@{@Model.FormClientId}();
            CheckRules@{@Model.FormClientId}();
        });

    } (jQuery));

    function PopulateFieldValues@{@Model.FormClientId}()
    {
        //fill field values
        //contourFieldValues = new Array();
        PopulateRecordValues@{@Model.FormClientId}();

        $("#contour_form_@{@Model.FormName.Replace(" ","")} .contourPage select").each(function() {
            contourFieldValues@{@Model.FormClientId}[$(this).attr("id")] = $("option[value='" + $(this).val() + "']", $(this)).text();
        });

        $("#contour_form_@{@Model.FormName.Replace(" ","")} .contourPage input").each(function() {



            if($(this).attr('type') == "text"){
                contourFieldValues@{@Model.FormClientId}[$(this).attr("id")] = $(this).val();
            }

            if($(this).attr('type') == "radio"){
                if($(this).is(':checked'))
                {
                    contourFieldValues@{@Model.FormClientId}[$(this).attr("name")] = $(this).val();
                }
            }

            if($(this).attr('type') == "checkbox"){

                if($(this).attr('id') != $(this).attr('name'))
                {
                    if($(this).is(':checked'))
                    {
                        if(contourFieldValues@{@Model.FormClientId}[$(this).attr("name")] == null)
                        {
                            contourFieldValues@{@Model.FormClientId}[$(this).attr("name")] = $(this).val();
                        }
                        else
                        {
                            contourFieldValues@{@Model.FormClientId}[$(this).attr("name")] += "," + $(this).val();
                        }
                    }
                } else {

                    contourFieldValues@{@Model.FormClientId}[$(this).attr("name")] = $(this).is(':checked').toString();
                }
            }

        });
    }

    function PopulateRecordValues@{@Model.FormClientId}() {
        contourFieldValues@{@Model.FormClientId} = new Array();

        @foreach (var recordVal in Model.RecordValues)
            {
                <text>
        if($("#@recordVal.Key").length == 0)
        {
            contourFieldValues@{@Model.FormClientId}["@recordVal.Key"] = "@recordVal.Value.Replace(System.Environment.NewLine, "\\n")";
        }
        </text>
            }
    }

    @*
     Group parent and field conditions within seperate brackets with an && operator between (so that all parent conditions must be true and all field conditions must be true).
     In addition, group each parent's rules within brackets and an && operator between each parent condition (so that all parent conditions must be true)
    *@

    function CheckRules@{@Model.FormClientId}() {

        @foreach (FieldsetViewModel fs in Model.CurrentPage.Fieldsets)
        {
            foreach (FieldViewModel f in fs.Fields)
            {
                if (f.HasCondition && f.ConditionRules.Any())
                {
                    var current = 1;
                    var currentParent = 1;

                     <text>
        if(
            @if (f.ParentConditions.Count > 0)
            {
            <text>(</text>
                        foreach (var parentCondition in f.ParentConditions)
                        {
                            var currentRule = 1;
                            //if (parentCondition.Rules.Any())
                            //{
                    <text>(</text>
                            //}
                            foreach (FieldConditionRule r in parentCondition.Rules)
                            {
                            <text>(contourFieldValues@{@Model.FormClientId}["@r.Field"] != null && </text>
                                switch (r.Operator)
                                {
                                    case FieldConditionRuleOperator.Is:
                                    <text>contourFieldValues@{@Model.FormClientId}["@r.Field"] == "@Html.Raw(r.Value.ParsePlaceHolders())"</text>
                                        break;
                                    case FieldConditionRuleOperator.IsNot:
                                    <text>contourFieldValues@{@Model.FormClientId}["@r.Field"] != "@Html.Raw(r.Value.ParsePlaceHolders())"</text>
                                        break;
                                    case FieldConditionRuleOperator.GreaterThen:
                                    <text>parseInt(contourFieldValues@{@Model.FormClientId}["@r.Field"]) > parseInt("@r.Value")</text>
                                        break;
                                    case FieldConditionRuleOperator.LessThen:
                                    <text>parseInt(contourFieldValues@{@Model.FormClientId}["@r.Field"]) < parseInt("@r.Value")</text>
                                        break;
                                    case FieldConditionRuleOperator.Contains:
                                    <text>contourFieldValues@{@Model.FormClientId}["@r.Field"].indexOf("@Html.Raw(r.Value.ParsePlaceHolders())") != -1</text>
                                        break;
                                    case FieldConditionRuleOperator.StartsWith:
                                    <text>contourFieldValues@{@Model.FormClientId}["@r.Field"].indexOf("@Html.Raw(r.Value.ParsePlaceHolders())") != -1</text>
                                        break;
                                    case FieldConditionRuleOperator.EndsWith:
                                    <text>contourFieldValues@{@Model.FormClientId}["@r.Field"].indexOf("@Html.Raw(r.Value.ParsePlaceHolders())") != -1</text>
                                        break;
                                }
                            <text>)</text>
                                if (parentCondition.Rules.Count > 1 && currentRule < parentCondition.Rules.Count)
                                {
                                    if (parentCondition.LogicType == FieldConditionLogicType.All)
                                    {
                                    <text>&&</text>
                                    }
                                    else
                                    {
                                    <text>||</text>
                                    }
                                }

                                currentRule++;


                            }
                        //if (parentCondition.Rules.Any())
                        //{
                    <text>) </text>
                        //}
                            if (f.ParentConditions.Count > 1 && currentParent < f.ParentConditions.Count)
                            {  
                                <text>&&</text>
                            }

                            currentParent++;
                        }
            <text>) 
            && </text>
            }
            (
            @foreach (FieldConditionRule r in f.ConditionRules)
            {
                            <text>(contourFieldValues@{@Model.FormClientId}["@r.Field"] != null && </text>
                            switch (r.Operator)
                            {
                                case FieldConditionRuleOperator.Is:
                                    <text>contourFieldValues@{@Model.FormClientId}["@r.Field"] == "@Html.Raw(r.Value.ParsePlaceHolders())"</text>
                                    break;
                                case FieldConditionRuleOperator.IsNot:
                                    <text>contourFieldValues@{@Model.FormClientId}["@r.Field"] != "@Html.Raw(r.Value.ParsePlaceHolders())"</text>
                                    break;
                                case FieldConditionRuleOperator.GreaterThen:
                                    <text>parseInt(contourFieldValues@{@Model.FormClientId}["@r.Field"]) > parseInt("@r.Value")</text>
                                    break;
                                case FieldConditionRuleOperator.LessThen:
                                    <text>parseInt(contourFieldValues@{@Model.FormClientId}["@r.Field"]) < parseInt("@r.Value")</text>
                                    break;
                                case FieldConditionRuleOperator.Contains:
                                    <text>contourFieldValues@{@Model.FormClientId}["@r.Field"].indexOf("@Html.Raw(r.Value.ParsePlaceHolders())") != -1</text>
                                    break;
                                case FieldConditionRuleOperator.StartsWith:
                                        <text>contourFieldValues@{@Model.FormClientId}["@r.Field"].indexOf("@Html.Raw(r.Value.ParsePlaceHolders())") != -1</text>
                                    break;
                                case FieldConditionRuleOperator.EndsWith:
                                    <text>contourFieldValues@{@Model.FormClientId}["@r.Field"].indexOf("@Html.Raw(r.Value.ParsePlaceHolders())") != -1</text>
                                    break;
                            }
                            <text>)</text>
                            if (f.ConditionRules.Count > 1 && current < f.ConditionRules.Count)
                            {
                                if (f.ConditionLogicType == FieldConditionLogicType.All)
                                {
                                    <text>&&</text>
                                }
                                else
                                {
                                    <text>||</text>
                                }
                            }

                            current++;
            }
            )
        )
        {
            @if (f.ConditionActionType == FieldConditionActionType.Show)
                {
                    <text>$("#@f.Id").closest(".contourField").show();</text>
                }
                else
                {
                    <text>$("#@f.Id").closest(".contourField").hide();</text>
                }

        }
        else
        {
            @if (f.ConditionActionType == FieldConditionActionType.Show)
                    {
                        <text>$("#@f.Id").closest(".contourField").hide();</text>
                    }
                    else
                    {
                        <text>$("#@f.Id").closest(".contourField").show();</text>
                    }
        }
    </text>

                    }
                }
            }

    }
</script>