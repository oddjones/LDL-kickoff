@model Umbraco.Forms.Mvc.Models.FieldViewModel
@using System.Web.Script.Serialization;
@using LDL.ContourForms.Models;
@using LDL.ContourForms.Helpers;
@using System.Linq;

@{
    int numberOfRepeatingItems = 0;
    string fieldName = Model.Name;

    // Retrieve the settings for this repeater
    var repeaterFieldSettings = Model.AdditionalSettings.Find(x => x.Key == "RepeaterFields");
    List<RepeaterField> fields = RepeaterHelper.GetFields(repeaterFieldSettings);

    // Fetch the data for the repeater
    SortedDictionary<int, SortedDictionary<int, RepeaterField>> repeaterData = RepeaterHelper.GetRepeaterDataFromHttpContext(fieldName);

    numberOfRepeatingItems = repeaterData.Count;

    if (numberOfRepeatingItems == 0)
    {
        numberOfRepeatingItems = 1;
    }
}

<div class="LdlRepeater">
    @for (int i = 1; i <= numberOfRepeatingItems; i++)
    {
        string val = "";
        int fieldIndex = 1;

        // Retrieve the values assigned to this repeating item/row
        SortedDictionary<int, RepeaterField> itemValues = null;
        if (repeaterData.ContainsKey(i))
        {
            itemValues = repeaterData[i];
        }

        // Loop throught the fields within the row
        <div class="LdlRepeaterItem">
            @foreach (var field in fields)
            {
                RepeaterField repField = null;
                if (itemValues != null && itemValues.ContainsKey(fieldIndex))
                {
                    repField = itemValues[fieldIndex];
                }
                string inputId = string.Format("{0}_{1}_1_{2}", Model.Id, fieldIndex, i);
                if (field.fieldtype == "Textfield")
                {
                    string fieldValue = (repField != null) ? repField.GetDataAsString() : "";
                    @DisplayTextfield(field.label, inputId, fieldValue, field.mandatory)
                }
                else if (field.fieldtype == "Textarea")
                {
                    string fieldValue = (repField != null) ? repField.GetDataAsString() : "";
                    @DisplayTextarea(field.label, inputId, fieldValue, field.mandatory)
                }
                else if (field.fieldtype == "Time")
                {
                    SortedDictionary<int, string> fieldValues = new SortedDictionary<int, string>();
                    if (repField != null)
                    {
                        fieldValues = repField.data;
                    }
                    @DisplayTime(field.label, Model.Id.ToString(), fieldIndex.ToString(), i.ToString(), fieldValues, field.mandatory)
                }
                fieldIndex++;
            }
            <a href="#" class="LdlRepeaterDelete">Delete</a>
        </div>
    }
    <a href="#" class="LdlRepeaterAdd">Add</a>
</div>
@* Hidden field used to 'bypass' Contour's Mandatory server validation - validation should be undertaken by the custom control  *@
<input type="hidden" name="@Model.Name" id="@Model.Id" class="first" value="1" />

@helper DisplayTextfield(string label, string id, string val, bool mandatory)
{
    <div>
        <label for="@id">@label</label>
        <input type="text" name="@id" id="@id" class="text" value="@val" maxlength="500"
               @{if (mandatory) { <text> data-val="true" data-val-required="@label is required" </text>  }} />
        @{if (mandatory)
        {
            <span class="field-validation-valid" data-valmsg-for="@id" data-valmsg-replace="true"></span>
        }}
    </div>
}

@helper DisplayTextarea(string label, string id, string val, bool mandatory)
{
    <div>
        <label for="@id">@label</label>
        <textarea name="@id" id="@id" class="text" value="@val" rows="4" cols="50"
                  @{if (mandatory) { <text> data-val="true" data-val-required="@label is required" </text>   }}></textarea>
        @{if (mandatory)
        {
            <span class="field-validation-valid" data-valmsg-for="@id" data-valmsg-replace="true"></span>
        }}
    </div>
}

@helper DisplayTime(string label, string fieldId, string fieldPosition, string rowId, SortedDictionary<int, string> vals, bool mandatory)
{

    IEnumerable<int> hours = Enumerable.Range(0, 24);
    IEnumerable<int> minutes = Enumerable.Range(0, 60);

    string hourInputId = string.Format("{0}_{1}_1_{2}", fieldId, fieldPosition, rowId);
    string minuteInputId = string.Format("{0}_{1}_2_{2}", fieldId, fieldPosition, rowId);

    <div>
        <label for="@hourInputId">@label</label>
        <select id="@hourInputId" name="@hourInputId"
                @if (mandatory) { <text> data-val="true" data-val-required="@label - hour is required" </text>   }>
            <option value=''>Hour</option>
            @foreach (int hour in hours)
            {
                <option value='@hour.ToString("D2")'
                        @{if (vals.ContainsKey(1) && hour.ToString("D2") == vals[1]) { <text> selected="selected" </text>       }}>
                    @hour.ToString("D2")
                </option>
            }
        </select>

        @{if (mandatory)
        {
            <span class="field-validation-valid" data-valmsg-for="@hourInputId" data-valmsg-replace="true"></span>
        }}

        <select id="@minuteInputId" name="@minuteInputId"
                @if (mandatory) { <text> data-val="true" data-val-required="@label - minute is required" </text>    }>
            <option value=''>Minute</option>
            @foreach (int minute in minutes)
            {
                <option value='@minute.ToString("D2")'
                        @{if (vals.ContainsKey(2) && minute.ToString("D2") == vals[2]) { <text> selected="selected" </text>       }}>
                    @minute.ToString("D2")
                </option>
            }
        </select>

        @{if (mandatory)
        {
            <span class="field-validation-valid" data-valmsg-for="@minuteInputId" data-valmsg-replace="true"></span>
        }}
    </div>
}